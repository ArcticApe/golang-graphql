// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CarbonIntensity struct {
	Zone               *string `json:"zone"`
	CarbonIntensity    *int    `json:"carbonIntensity"`
	Datetime           *string `json:"datetime"`
	UpdatedAt          *string `json:"updatedAt"`
	CreatedAt          *string `json:"createdAt"`
	EmissionFactorType *string `json:"emissionFactorType"`
	IsEstimated        *bool   `json:"isEstimated"`
	EstimationMethod   *string `json:"estimationMethod"`
}

type PowerBreakdown struct {
	Zone                      *string                       `json:"zone"`
	Datetime                  *string                       `json:"datetime"`
	PowerProductionBreakdown  *TypPowerProductionBreakdown  `json:"powerProductionBreakdown"`
	PowerProductionTotal      *int                          `json:"powerProductionTotal"`
	PowerConsumptionBreakdown *TypPowerConsumptionBreakdown `json:"powerConsumptionBreakdown"`
	PowerConsumptionTotal     *int                          `json:"powerConsumptionTotal"`
	PowerImportBreakdown      *TypPowerImpBreakdown         `json:"powerImportBreakdown"`
	PowerImportTotal          *int                          `json:"powerImportTotal"`
	PowerExportBreakdown      *TypPowerExpBreakdown         `json:"powerExportBreakdown"`
	PowerExportTotal          *int                          `json:"powerExportTotal"`
	FossilFreePercentage      *int                          `json:"fossilFreePercentage"`
	RenewablePercentage       *int                          `json:"renewablePercentage"`
	UpdatedAt                 *string                       `json:"updatedAt"`
	CreatedAt                 *string                       `json:"createdAt"`
}

type TypPowerConsumptionBreakdown struct {
	BatteryDischarge *string `json:"batteryDischarge"`
	Biomass          *int    `json:"biomass"`
	Coal             *int    `json:"coal"`
	Gas              *int    `json:"gas"`
	Geothermal       *int    `json:"geothermal"`
	Hydro            *int    `json:"hydro"`
	HydroDischarge   *int    `json:"hydroDischarge"`
	Nuclear          *int    `json:"nuclear"`
	Oil              *int    `json:"oil"`
	Solar            *int    `json:"solar"`
	Unknown          *int    `json:"unknown"`
	Wind             *int    `json:"wind"`
}

type TypPowerExpBreakdown struct {
	BE *int `json:"bE"`
	FR *int `json:"fR"`
	IE *int `json:"iE"`
}

type TypPowerImpBreakdown struct {
	BE *int `json:"bE"`
	FR *int `json:"fR"`
	IE *int `json:"iE"`
}

type TypPowerProductionBreakdown struct {
	Biomass    *int `json:"biomass"`
	Coal       *int `json:"coal"`
	Gas        *int `json:"gas"`
	Geothermal *int `json:"geothermal"`
	Hydro      *int `json:"hydro"`
	Nuclear    *int `json:"nuclear"`
	Oil        *int `json:"oil"`
	Solar      *int `json:"solar"`
	Unknown    *int `json:"unknown"`
	Wind       *int `json:"wind"`
}

type CliqueType string

const (
	// People who are elite with parents having money
	CliqueTypeKooks CliqueType = "KOOKS"
	// People who desperate to move up the social ladder to become new versions of themselves and establish new beginnings
	CliqueTypePogues CliqueType = "POGUES"
)

var AllCliqueType = []CliqueType{
	CliqueTypeKooks,
	CliqueTypePogues,
}

func (e CliqueType) IsValid() bool {
	switch e {
	case CliqueTypeKooks, CliqueTypePogues:
		return true
	}
	return false
}

func (e CliqueType) String() string {
	return string(e)
}

func (e *CliqueType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CliqueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CliqueType", str)
	}
	return nil
}

func (e CliqueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
