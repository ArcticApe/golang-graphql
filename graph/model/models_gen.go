// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type CarbonIntensity struct {
	Zone               *string `json:"zone"`
	CarbonIntensity    *int    `json:"carbonIntensity"`
	Datetime           *string `json:"datetime"`
	UpdatedAt          *string `json:"updatedAt"`
	CreatedAt          *string `json:"createdAt"`
	EmissionFactorType *string `json:"emissionFactorType"`
	IsEstimated        *bool   `json:"isEstimated"`
	EstimationMethod   *string `json:"estimationMethod"`
}

type CliqueType string

const (
	// People who are elite with parents having money
	CliqueTypeKooks CliqueType = "KOOKS"
	// People who desperate to move up the social ladder to become new versions of themselves and establish new beginnings
	CliqueTypePogues CliqueType = "POGUES"
)

var AllCliqueType = []CliqueType{
	CliqueTypeKooks,
	CliqueTypePogues,
}

func (e CliqueType) IsValid() bool {
	switch e {
	case CliqueTypeKooks, CliqueTypePogues:
		return true
	}
	return false
}

func (e CliqueType) String() string {
	return string(e)
}

func (e *CliqueType) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CliqueType(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CliqueType", str)
	}
	return nil
}

func (e CliqueType) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
